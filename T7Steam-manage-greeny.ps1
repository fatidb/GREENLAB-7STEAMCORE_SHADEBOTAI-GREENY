# Configuration de l'environnement T7STEAM
$projectPath = "C:\BIG GREEN 2025 V01\t7steam-core\t7steam-c1-shadebot"
$botFile = "shaderbot_greeny_v7.3.py"
$backupPath = "$projectPath\backups"
$logsPath = "$projectPath\logs"
$configPath = "$projectPath\config"

# Cr√©ation des dossiers n√©cessaires
Write-Host "üîß Cr√©ation des dossiers du projet..." -ForegroundColor Cyan
@(
    "$backupPath",
    "$logsPath",
    "$configPath"
) | ForEach-Object {
    if (-not (Test-Path $_)) {
        New-Item -Path $_ -ItemType Directory -Force
        Write-Host "üìÅ Cr√©ation du dossier: $_" -ForegroundColor Green
    }
}

# Fonction de backup
function Backup-BotFiles {
    $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"
    $backupFile = "$backupPath\${botFile}_$timestamp.bak"
    
    Write-Host "üíæ Cr√©ation d'une sauvegarde..." -ForegroundColor Yellow
    Copy-Item "$projectPath\$botFile" $backupFile
    Write-Host "‚úÖ Sauvegarde cr√©√©e: $backupFile" -ForegroundColor Green
}

# Fonction de d√©ploiement
function Deploy-Bot {
    param (
        [switch]$RestartBot
    )
    
    Write-Host "üöÄ D√©ploiement du bot..." -ForegroundColor Cyan
    
    # Arr√™t du bot si demand√©
    if ($RestartBot) {
        Write-Host "üõë Arr√™t du bot en cours..." -ForegroundColor Yellow
        Get-Process python | Where-Object {$_.MainWindowTitle -like "*shaderbot*"} | Stop-Process -Force
        Start-Sleep -Seconds 2
    }
    
    # D√©marrage du bot
    Write-Host "‚ñ∂Ô∏è D√©marrage du bot..." -ForegroundColor Yellow
    Start-Process python -ArgumentList "$projectPath\$botFile" -WindowStyle Hidden
    
    # V√©rification
    Start-Sleep -Seconds 5
    $process = Get-Process python | Where-Object {$_.MainWindowTitle -like "*shaderbot*"}
    if ($process) {
        Write-Host "‚úÖ Bot d√©marr√© avec succ√®s!" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Erreur lors du d√©marrage du bot!" -ForegroundColor Red
    }
}

# Fonction de monitoring
function Show-BotStatus {
    Write-Host "`nüìä √âtat du bot:" -ForegroundColor Cyan
    
    # V√©rification du processus
    $process = Get-Process python | Where-Object {$_.MainWindowTitle -like "*shaderbot*"}
    if ($process) {
        Write-Host "‚úÖ Bot en cours d'ex√©cution" -ForegroundColor Green
        Write-Host "   PID: $($process.Id)"
        Write-Host "   M√©moire: $([math]::Round($process.WorkingSet64 / 1MB, 2)) MB"
        Write-Host "   Temps d'ex√©cution: $($process.TotalProcessorTime)"
    } else {
        Write-Host "‚ùå Bot arr√™t√©" -ForegroundColor Red
    }
    
    # Affichage des derniers logs
    Write-Host "`nüìú Derniers logs:" -ForegroundColor Cyan
    Get-Content "$logsPath\bot_*.log" -Tail 10
}

# Menu principal
function Show-Menu {
    Write-Host "`n=== T7STEAM Bot Management ===" -ForegroundColor Cyan
    Write-Host "1. üì¶ D√©ployer le bot"
    Write-Host "2. üîÑ Red√©marrer le bot"
    Write-Host "3. üíæ Cr√©er une sauvegarde"
    Write-Host "4. üìä Afficher l'√©tat du bot"
    Write-Host "5. ‚ùå Quitter"
    
    $choice = Read-Host "`nChoisissez une option (1-5)"
    
    switch ($choice) {
        "1" { Deploy-Bot }
        "2" { Deploy-Bot -RestartBot }
        "3" { Backup-BotFiles }
        "4" { Show-BotStatus }
        "5" { return $false }
        default { Write-Host "‚ùå Option invalide" -ForegroundColor Red }
    }
    return $true
}

# Boucle principale
Write-Host "ü§ñ T7STEAM Bot Management Tool" -ForegroundColor Cyan
do {
    $continue = Show-Menu
} while ($continue)